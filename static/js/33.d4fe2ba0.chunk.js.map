{"version":3,"file":"static/js/33.d4fe2ba0.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","service/ApiServiceFetch.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React from 'react';\n\nexport const Loader = () => {\n  return <p>Loading...</p>;\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MoviesStyleLink = styled(NavLink)`\n  display: flex;\n  background: none;\n  border: 2px solid;\n  font: inherit;\n  line-height: 1;\n  margin: 0.5em;\n  padding: 1em 2em;\n  transition: 0.25s;\n  color: #ff9000;\n  border-radius: 8px;\n  border-color: #183666;\n  margin-top: 40px;\n  max-width: 150px;\n  align-items: center;\n  justify-content: center;\n  text-decoration: none;\n  cursor: pointer;\n  transition: color, border-color, box-shadow, transform 300ms ease;\n  :hover,\n  :focus {\n    box-shadow: 0 0.5em 0.5em -0.4em, #ffa260;\n    transform: translateY(-0.25em);\n    border-color: #ffa260;\n    color: #fff;\n  }\n`;\n\nexport const WrapperDetails = styled.div`\n  display: flex;\n  padding: 0 20px;\n  margin-top: 150px;\n  gap: 30px;\n`;\n\nexport const Overview = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: flex-start;\n  margin-top: 108px;\n`;\n","import { Suspense } from 'react';\nimport { fetchInfoMovies } from '../../service/ApiServiceFetch';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { useEffect, useState, useRef } from 'react';\n// import YouTube from 'react-youtube';\nimport { WrapperDetails, Overview, ButtonWrapper } from './MovieDetails.styled';\nimport { StyledLink } from '../../components/Header/Header.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nfunction MovieDetails() {\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n\n  const fromRef = useRef(location?.state?.from);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchInfoMovies(movieId);\n\n        setSelectedMovie(response);\n      } catch (error) {\n        console.log('error :>> ', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [movieId]);\n\n  function getGenres() {\n    const result =\n      selectedMovie?.genres && selectedMovie?.genres.map(genre => genre?.name);\n    return result?.join(', ');\n  }\n\n  return (\n    selectedMovie && (\n      <main>\n        <WrapperDetails>\n          <img\n            alt={selectedMovie?.title || selectedMovie?.title}\n            src={`http://image.tmdb.org/t/p/w400${selectedMovie?.poster_path}`}\n          />\n\n          <Overview>\n            <h1>{selectedMovie?.title || selectedMovie?.name}</h1>\n            <h2>Overview</h2>\n            <p>Users Score: {selectedMovie?.overview}</p>\n\n            <h3>Release date: {selectedMovie?.release_date}</h3>\n            <h4>Geners: {getGenres()}</h4>\n            <span>Reiting: {selectedMovie?.vote_average?.toFixed(2)}</span>\n            <ButtonWrapper>\n              <StyledLink to={fromRef?.current} state={{ from: location }}>\n                Go Back\n                {isLoading && <Loader />}\n              </StyledLink>\n\n              <StyledLink to={'cast'} state={{ from: location }}>\n                Casts\n                {isLoading && <Loader />}\n              </StyledLink>\n              <StyledLink to={'reviews'} state={{ from: location }}>\n                Reviews\n                {isLoading && <Loader />}\n              </StyledLink>\n              <StyledLink to={'trailer'} state={{ from: location }}>\n                Watch trailer\n                {isLoading && <Loader />}\n              </StyledLink>\n            </ButtonWrapper>\n          </Overview>\n        </WrapperDetails>\n\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </main>\n    )\n  );\n}\nexport default MovieDetails;\n","const API_KEY = '631075854851454119cb09d20165cf60';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n//? список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n\n//?  пошук фільму за ключовим словом на сторінці фільмів.\n\nexport const fetchMoviesSearch = async search => {\n  try {\n    const response = await fetch(\n      `\n${BASE_URL}/search/movie?api_key=${API_KEY}&page=1&query=${search}`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n\n// ? запит повної інформації про фільм для сторінки кінофільму.\n\nexport const fetchInfoMovies = async movieId => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n\n// ? запит інформації про акторський склад для сторінки кінофільму.\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const response = await fetch(`\n${BASE_URL}/movie/${movieId}/credits?&api_key=${API_KEY}&language=en-US`);\n    return await response.json();\n  } catch (error) {}\n};\n\n// ? запит оглядів для сторінки кінофільму.\n\nexport const fetchMoviesReviews = async movieId => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return await response.json();\n  } catch (error) {}\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Loader","WrapperDetails","styled","NavLink","Overview","ButtonWrapper","useState","selectedMovie","setSelectedMovie","movieId","useParams","isLoading","setIsLoading","location","useLocation","fromRef","useRef","state","from","useEffect","fetchMovies","fetchInfoMovies","response","console","log","alt","title","src","poster_path","name","overview","release_date","result","genres","map","genre","join","getGenres","vote_average","toFixed","to","current","Suspense","fallback","API_KEY","BASE_URL","fetchTrendingMovies","fetch","json","fetchMoviesSearch","search","fetchMovieCredits","fetchMoviesReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}